@using Microsoft.AspNetCore.Html
@using RetailCRMCore.Models

@model Product?

<script type="application/json" id="asp_model">
    @{
        var obj = new HtmlString(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
    }
    @obj
</script>
<script type="text/javascript">
    var model = JSON.parse(document.getElementById("asp_model").innerHTML);
</script>
<div class="row d-none">
    <div class="col-md-12">
        <h1 class="text-center mb-0"><a href="@Url.ActionLink("Category", "Store", new {name=ViewData["backUrl"]})">@ViewData["categoryName"]</a></h1>
    </div>
</div>


@*<p class="text-center mb-0"><a href="@Url.ActionLink("Offer", "Products", new {pid = Model?.id, oid=467})">467</a></p>*@


@if (!String.IsNullOrEmpty(Model?.texturePath))
{
    <div id="model_fancybox" style="display:none">
        <div class="model-wrapper loading">
            <div class="btn-anim position-absolute" style="top:25px">
                <input type="button" class="btn btn-primary" value="закрыть" data-fancybox-close="#model_fancybox" />
            </div>
        </div>
    </div>
}

<div class="mt-3 px-3 mr-auto goback-wrapper">
    <a class="" href="@Url.ActionLink("Category", "Store", new {categoryName=ViewData["backUrl"]})">
        <i class="fas fa-arrow-left md ms-0 ms-md-5 nohover" style="opacity:1;color:var(--main-text-color-hover)"></i>
        <span class="" style="display: inline-block;color:var(--main-text-color-hover)">@ViewData["categoryName"]</span>
    </a>
</div>

<div class="container-lg container-fluid px-0" data-id="@Model?.id" id="product_info">
    <div class="row pb-5">
        <div class="col-md-6 px-0" style="display:flex; justify-content:center">
            <div id="product_carousel" pause class="carousel mx-0 slide carousel-fade wrapper nohover" data-bs-interval="0" data-bs-ride="carousel">
                @if (!String.IsNullOrEmpty(Model?.texturePath))
                {
                    <a data-bs-toggle="tooltip" data-bs-placement="top" title="Посмотреть в 3D" data-fancybox href="#model_fancybox" class="position-absolute">
                        <img src="~/img/3dicon.png" alt="@Model?.name" />
                    </a>
                }
                <div class="carousel-inner">
                    @{
                        int index = 0;
                        foreach (Image? image in Model?.images!)
                        {
                            if (image.Size != ImageSize.m) continue;
                            string active = index == 0 ? "active" : "";
                            <div class="carousel-item @active" index="@index">
                                <a class="fancybox" data-thumbs='{"autoStart":false}' href="@Model?.images.FirstOrDefault(i => i.FileName == image?.FileName?.Replace("m", "l"))?.Url" rel="gallery" data-fancybox="images-preview">
                                    <img src="@image.Url" class="w-100" alt="@Model?.name" style="object-fit: contain;" height="450">
                                </a>
                            </div>
                            index++;
                        }
                    }
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#product_carousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Предыдущий</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#product_carousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Следующий</span>
                </button>

                <div class="carousel-preview">
                    <div class="owl-carousel owl-loaded">
                        <div class="owl-stage-outer">
                            <div class="owl-stage ps-0">
                                @{
                                    index = 0;
                                    foreach (Image? image in Model?.images!)
                                    {
                                        if (image.Size != ImageSize.s) continue;
                                        string active = index == 0 ? "active" : "";
                                        <div class="owl-item">
                                            <div class="preview-item @active" index="@index">
                                                <img src="@image.Url" alt="@Model?.name" style="object-fit: contain; width:100%" height="120">
                                            </div>
                                        </div>
                                        index++;
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6 px-3">
            <h2 class="text-center p-0 m-0">@Model?.name</h2>
            <br>
            <div class="text-content">
                <p>@Model?.description</p>
                @{
                    var printSize = string.IsNullOrEmpty(Model?.offers?.FirstOrDefault()?.PrintSize) ? "" : $"Размер принта: {Model?.offers?.FirstOrDefault()?.PrintSize}";
                    var material = string.IsNullOrEmpty(Model?.offers?.FirstOrDefault()?.Material) ? "" : $"Состав: {Model?.offers?.FirstOrDefault()?.Material}";
                }
            </div>
            <div id="offer_info">
                <div value="printSize">@printSize</div>
                <div value="material">@material</div>
            </div>

            @if (Model?.models.Count > 1)
            {
                <div id="sub_categories" style="position:relative">
                    <div class="d-inline subline-wrapper">
                        <label class="mt-4 mb-1">
                            Выберите модель:
                        </label>
                        <span class="subline-text" data-bs-toggle="modal" data-bs-target="#sizesModal">
                            таблица размеров
                        </span>
                    </div>
                    <!-- Modal -->
                <div class="modal fade" id="sizesModal" tabindex="-1" aria-labelledby="sizesModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-body p-0">
                                    <i class="fas fa-times fa-2x position-absolute" aria-hidden="true" data-bs-dismiss="modal" style="right:15px;top:10px;color:var(--main-text-color-hover)"></i>
                                    <a class="fancybox" href="~/img/t-shirt_sizes.jpg">
                                        <img src="~/img/t-shirt_sizes.jpg" class="w-100" style="object-fit: contain;" alt="Таблица размеров" />
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="btn-group" role="group" notify>
                        @{
                            index = 0;
                            foreach (var mod in Model.models)
                            {
                                <div class="btn-anim m-1">
                                    <input type="radio" class="btn-check btn-main" name="subgroupradio" id="@mod-button" value="@mod" autocomplete="off">
                                    <label class="btn btn-primary" for="@mod-button">@mod</label>
                                </div>
                                index++;
                            }
                        }
                    </div>

                    <div class="sizes">
                        <div class="sizes-inner">
                            <label class="mt-4 mb-1">
                                Размеры:
                            </label>
                            <div class="position-relative d-inline">
                            </div>
                            <div class="btn-group d-block w-100" role="group">
                                @foreach (var mod in Model.models)
                                {
                                    <div value="@mod" notify class="justify-content-md-start justify-content-center flex-wrap">
                                        @{
                                            var offers = Model?.offers?.Where(o => o.Model == mod).ToList();
                                            foreach (Offer offer in offers)
                                            {
                                                string isDisabled = offer.quantity == 0 || !offer.active ? "disabled" : "";
                                                HtmlString toolTip = offer.quantity == 0 ?
                                                new HtmlString("data-bs-toggle='tooltip' data-bs-placement='top' title='Временно нет в наличии'") : new HtmlString("");
                                                <div class="btn-anim m-1 @isDisabled" @toolTip>
                                                    <input type="radio" class="btn-check btn-main" name="btnradio" id="@offer.id" autocomplete="off">
                                                    <label class="btn btn-primary" for="@offer.id">@offer.article?.Split("-")[1]</label>
                                                </div>
                                            }
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="sizes">
                    <div class="sizes-inner">
                        @if (Model?.groups?.FirstOrDefault(g => g.name.ToLower() == "joggers") == null)
                        {
                            <div class="d-inline">
                                <label class="mt-4 mb-1">
                                    Размеры:
                                </label>
                                <span data-bs-toggle="modal" data-bs-target="#sizesModal" class="subline-text">таблица размеров</span>
                                <div class="modal fade" id="sizesModal" tabindex="-1" aria-labelledby="sizesModalLabel" aria-hidden="true">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-body p-0">
                                                <i class="fas fa-times fa-2x position-absolute" aria-hidden="true" data-bs-dismiss="modal" style="right:15px;top:10px;color:var(--main-text-color-hover)"></i>
                                                <a class="fancybox" href="~/img/hoodie_sizes.jpg">
                                                    <img src="~/img/hoodie_sizes.jpg" class="w-100" style="object-fit: contain;" alt="Таблица размеров" />
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <label class="mt-4 mb-1">
                                Размеры:
                            </label>
                        }
                        <div class="btn-group d-block w-100" role="group">
                            @foreach (var mod in Model?.models!)
                            {
                                <div value="@mod" notify class="w-100 active d-flex justify-content-md-start justify-content-center flex-nowrap">
                                    @{
                                        var offers = Model?.offers?.Where(o => o.Model == mod).ToList();
                                        foreach (Offer offer in offers)
                                        {
                                            string isDisabled = offer.quantity == 0 || !offer.active ? "disabled" : "";
                                            HtmlString toolTip = offer.quantity == 0 ?
                                            new HtmlString("data-bs-toggle='tooltip' data-bs-placement='top' title='Временно нет в наличии'") : new HtmlString("");
                                            <div class="btn-anim m-1 @isDisabled" @toolTip>
                                                <input type="radio" class="btn-check btn-main" name="btnradio" id="@offer.id" autocomplete="off">
                                                <label class="btn btn-primary" for="@offer.id">@offer.article?.Split("-")[1]</label>
                                            </div>
                                        }
                                    }
                                </div>
                            }

                        </div>
                    </div>
                </div>
            }
            <br />
            <div class="fa-2x mt-3 text-center">
                <div class="d-inline">
                    <strong>@Model.maxPrice</strong>
                    <i class="fa fa-rub nohover ms-1 sm" aria-hidden="true"></i>
                </div>
                <button tabindex="0" class="btn btn-main bg-gray w-25 ms-3">
                    <i class="fas nohover  fa-cart-plus lg opacity-100 align-middle" aria-hidden="true" style="color: black;"></i>
                </button>
            </div>
        </div>
    </div>

    @if (Model.analogs.Count != 0)
    {
        <div class="row px-3">
            <h5 class="my-0 mt-5">Смотрите также:</h5>
        </div>

        <div class="row px-3 owl-wrapper" loop="true">
            <div class="owl-carousel owl-loaded">
                <div class="owl-stage-outer">
                    <div class="owl-stage ps-0 py-2">
                        @foreach (Product p in Model.analogs)
                        {
                            <div class="owl-item">
                                <a href="@Url.ActionLink(p.name.ToLower(), p.groups?.FirstOrDefault()?.name?.ToLower())" class="nohover">
                                    <div class="item card bg-transparent nohover">
                                        <img src="@p.images?.FirstOrDefault(i => i.Side == ImageSide.front && i.Size == ImageSize.m)?.Url" class="w-100 px-3" style="object-fit:contain; background-color: var(--main-content-bg-color);" alt="@p.name" height="300">
                                        <div class="card-body">
                                            <h5 class="card-title text-center nohover">@p.name</h5>
                                            <p class="card-text fa-sm text-end">
                                                @p.maxPrice <i class="fa fa-rub nohover"></i>
                                            </p>
                                        </div>
                                    </div>
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    @if (ViewBag?.History != null && (ViewBag?.History as List<Product>)?.Count > 1)
    {
        <div id="history">
            <div class="row px-3">
                <h5 class="my-0">Вы просматривали:</h5>
            </div>

            <div class="row px-3 owl-wrapper py-2" loop="false">
                <div class="owl-carousel owl-loaded">
                    <div class="owl-stage-outer">
                        <div class="owl-stage ps-0">
                            @{
                                foreach (Product p in ViewBag?.History as List<Product>)
                                {
                                    if (p.id == Model.id) continue;
                                    <div class="owl-item" data="@p.id">

                                        <a href="@Url.ActionLink(p.name.ToLower(), p.groups?.FirstOrDefault()?.name?.ToLower())" class="nohover">
                                            <div class="item card bg-transparent nohover">
                                                <img src="@p.images?.FirstOrDefault(i => i.Side == ImageSide.front && i.Size == ImageSize.m)?.Url" class="w-100 px-3" style="object-fit:contain; background-color: var(--main-content-bg-color);" alt="@p.name" height="300">
                                                <div class="card-body">
                                                    <h5 class="card-title text-center nohover mb-0">@p.name</h5>
                                                    <p class="card-buttons fa-sm d-inline-flex justify-content-end">
                                                        <i class="fas fa-times"></i>
                                                    </p>
                                                </div>
                                            </div>
                                        </a>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

</div>

<script src="~/js/product.js" asp-append-version="true"></script>

<script>
    if (!isDevelopment) {
        try {
            ym(87733644, 'reachGoal', 'contentview');
            window.onload = function () {
                setTimeout(() => {
                    VK.Goal('view_content');
                }, 150);
            }
        }
        catch (e) {
            console.log(e);
        }
    }

    $(document).ready(function () {
        let items = $('.owl-wrapper[loop=false] .owl-item');
        items.each((i, e) => {
            let $this = $(e);
            let id = e.getAttribute('data');
            let button = $this.find('.card-buttons i.fas.fa-times');
            button.on('click', (evt) => {
                evt.preventDefault();
                $this.addClass('opacity-25');
                sendAjaxForm({ id: id }, "@Url.ActionLink("RemoveFromHistoryAsync","Products")",
                    (responce) => {
                        if (responce.Success) {
                            if ($('.owl-wrapper[loop=false] .owl-item').length == 1) {
                                $('#history h5').addClass('fade');
                                setTimeout(() => $this.remove(), 300);
                            }
                            else {
                                $this.remove();
                            }
                        }
                    }, false);
            });
        });
    });

</script>

<script type="module">
    import * as three from '../../build/three.js';
    import { OrbitControls } from '../../lib/three/controls/OrbitControls.js';
    import { GUI } from '../../lib/three/lil-gui.module.min.js';
    import { GLTFLoader } from '../../lib/three/GLTFLoader.js';

    //var modelsArray = ["../../3d/hoody/hoody.gltf", "../../3d/demo/shirt/scene.gltf", "../../3d/itwiki/scene.gltf"];

    function renderModel(wrapper, modelSource) {
        if (wrapper == null || modelSource == null) return;
        if (wrapper == null) return;

        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(
            40,  // fov
            window.innerWidth / window.innerHeight,   // aspect
            0.05, // near
            500); // far
        camera.position.z = 7;
        const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
        const loader = new GLTFLoader();
        renderer.setClearColor(0x000000, 0);
        renderer.setSize(window.innerWidth, window.innerHeight);
        wrapper.appendChild(renderer.domElement);
        const pLight = new THREE.PointLight(0xFFFFFF, 4);
        const pLight2 = new THREE.PointLight(0xFFFFFF, 4);
        const pLight3 = new THREE.PointLight(0xFFFFFF, 4);
        const pLight4 = new THREE.PointLight(0xFFFFFF, 4);
        pLight.position.z = 1;
        pLight.position.y = 1;
        pLight.position.x = 0;
        pLight2.position.z = -1;
        pLight2.position.y = 1;
        pLight2.position.x = 0;

        pLight3.position.z = 0;
        pLight3.position.y = 1;
        pLight3.position.x = 2;

        pLight4.position.z = 0;
        pLight4.position.y = 1;
        pLight4.position.x = -2;

        scene.add(pLight3);
        scene.add(pLight4);
        scene.add(pLight2);
        scene.add(pLight);

        let obj = null;
        const controls = new OrbitControls(camera, renderer.domElement);
        controls.minDistance = 1;
        controls.maxDistance = 8;

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
            animate();
        }

        var vendorCode = '@Model.article';

        var texturePath = `../../3d/Textures/${vendorCode}/Color.jpg`;

             var onProgress = function (xhr) {
                console.log((xhr.loaded / xhr.total * 100) + '% loaded');
            };

            var onError = function (xhr) {
                console.log('An error happened');
             };


        var texture = new THREE.TextureLoader().load(texturePath, (xhr)=>{ console.log(xhr)}, onProgress, onError);

        texture.flipY = false;

        //texture.rotation = 90;

        //let material = new THREE.MeshStandardMaterial();
        texture.wrapS = THREE.RepeatWrapping;
        texture.wrapT = THREE.RepeatWrapping;

         //texture.offset.set( 0, 0 );
         //texture.repeat.set( 2, 2 );


         function changeTextureOffset(x, y){
              texture.offset.set( x, y );
              animate();
         }

        //var texture = THREE.ImageUtils.loadTexture(texturePath, {}, function() {
        //    renderer.render(scene);
        //}),


        //console.log(texture, material);

        loader.load(modelSource, function (gltf) {
            obj = gltf;
            obj.scene.scale.set(1, 1, 1);
            obj.scene.position.z = 0;
            obj.scene.position.y = 0;
            obj.scene.position.x = 0;
            scene.add(obj.scene);
            controls.enableDamping = true;
            controls.dampingFactor = 0.25;
            controls.enableZoom = true;

            let model = gltf.scene.children[0].material;
            let color = model.color;
            console.log(obj.scene.children[0].material.map);

            obj.scene.children[0].material.map = texture;

            let wrapper = $('#model_fancybox > .model-wrapper');

            //wrapper.prepend('<div id="color_picker" class="position-absolute" style="top: 80px;"><input type="color" /></div>');

            //wrapper.prepend('<div class="position-absolute" style="top: 80px;"><input id="x_offset" type="number" /><input id="y_offset" type="number" /></div>');
            let colors = $('#x_offset, #y_offset').find('input');
            colors.on('change', (evt) => {
                //let newColor = hexToRgb(evt.target.value);
                //color.r = newColor.r;
                //color.g = newColor.g;
                //color.b = newColor.b;
                //animate();

                changeTextureOffset(document.getElementById('x_offset').value, document.getElementById('y_offset').value);

            });
            controls.update(wrapper);
        });

        function animate() {
            controls.update();
            requestAnimationFrame(animate);
            renderer.render(scene, camera);
        };



        window.addEventListener('resize', onWindowResize, false);
        animate();
    }

    (function () {
        $('.model-wrapper').each((i, e) => { renderModel(e, '../../3d/Model/Base.gltf'); });
    })();

</script>
