@using Microsoft.AspNetCore.Html
@using RetailCRMCore.Models

@model Product?

<div class="row">
  <div class="col-md-12">
    <h1 class="text-center"><a href="@Url.ActionLink("Category", "Categories", new {name=ViewData["backUrl"]})">@ViewData["categoryName"]</a></h1>
  </div>
</div>

@if (!String.IsNullOrEmpty(Model?.modelPath))
{
  <div id="model_fancybox" style="display:none">
    <div class="model-wrapper"></div>
  </div>
}

<div class="mt-2 mr-auto icon-link">
  <a class="" href="@Url.ActionLink("Category", "Categories", new {name=ViewData["backUrl"]})">
    <i class="fas fa-arrow-left md ms-0 ms-md-5 nohover" style="opacity:1"></i>
    <span class="" style="display: inline-block;">назад</span>
  </a>
</div>

<div class="container mt-1 px-0" data-id="@Model?.id" id="product_info">
  <div class="row">
    <div class="col-md-6" style="display:flex; justify-content:center">
      <div id="product_carousel" pause class="carousel mx-0 slide carousel-fade wrapper nohover" data-bs-interval="0" data-bs-ride="carousel">
        @if (!String.IsNullOrEmpty(Model?.modelPath))
        {
          <a data-bs-toggle="tooltip" data-bs-placement="top" title="Посмотреть в 3D" data-fancybox href="#model_fancybox" class="position-absolute">
            <img src="~/img/3dicon.png" />
          </a>
        }
        <div class="carousel-indicators">
          @{
            int index = 0;
            foreach (Image? image in Model?.images!)
            {
              if (image.Size != ImageSize.l) continue;
              string active = index == 0 ? "active" : "";
              <button type="button" data-bs-target="#product_carousel" class="@active" data-bs-slide-to="@index" aria-label="@index"></button>
              index++;
            }
          }
        </div>
        <div class="carousel-inner">
          @{
            index = 0;
            foreach (Image? image in Model?.images!)
            {
              if (image.Size != ImageSize.m) continue;
              string active = index == 0 ? "active" : "";
              <div class="carousel-item @active">
                <a class="fancybox" data-thumbs='{"autoStart":true}' href="@Model?.images.FirstOrDefault(i => i.FileName == image?.FileName?.Replace("m", "l"))?.Url" rel="gallery" data-fancybox="images-preview">
                  <img src="@image.Url" class="w-100" alt="@Model?.name" style="object-fit: cover;" height="540" width="337">
                </a>
              </div>
              index++;
            }
          }
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#product_carousel" data-bs-slide="prev">
          <span class="carousel-control-prev-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Предыдущий</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#product_carousel" data-bs-slide="next">
          <span class="carousel-control-next-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Следующий</span>
        </button>
      </div>
    </div>
    <div class="col-md-6">
      <h2 class="text-center p-0 m-0">@Model?.name</h2>
      <small class="opacity-50 fa-1x text-start d-block">Артикул: @Model?.article</small>
      <br>
      <p>@Model?.description</p>

      @if (ViewBag?.Category?.SubGroups?.Length > 0)
      {
        <div id="sub_categories" style="position:relative">
          <label class="mt-4 mb-1">
            Модель:
          </label>

          <div class="btn-group w-100 justify-content-md-start justify-content-center flex-wrap" role="group">
            @{
              index = 0;
              foreach (ProductGroup? productGroup in ((ProductGroup)ViewBag?.Category!).SubGroups!)
              {
                if (!productGroup.active) continue;
              //string isChecked = index == 0 ? "checked" : "";
                <div class="btn-anim m-1">
                  <input type="radio" class="btn-check btn-main" name="subgroupradio" id="@productGroup.id" autocomplete="off">
                  <label class="btn btn-primary" for="@productGroup.id">@productGroup.name</label>
                </div>
                index++;
              }
            }
          </div>

        </div>
      }

      <div id="sizes">
        <label class="mt-4 mb-1">
          Размеры:
        </label>
        <div class="position-relative d-inline">
          <i class="fas fa-question position-absolute" style="top: -15px;right: -10px;font-size:1.2em;color: var(--main-bg-color);"></i>
        </div>
        <div class="btn-group w-100 justify-content-md-start justify-content-center flex-wrap" role="group">
          @{
            index = 0;
            foreach (Offer offer in Model?.offers!)
            {
              if (!offer.active) continue;
              string isChecked = index == 0 ? "checked" : "";
              string isDisabled = offer.quantity == 0 ? "disabled" : "";
              HtmlString toolTip = offer.quantity == 0 ?
              new HtmlString("data-bs-toggle='tooltip' data-bs-placement='top' title='Временно нет в наличии'") : new HtmlString("");
              <div class="btn-anim m-1 @isDisabled">
                <input type="radio" class="btn-check btn-main" name="btnradio" id="@offer.id" autocomplete="off">
                <label @toolTip class="btn btn-primary" style="width:100px" for="@offer.id">@offer.article.Split("-")[1]</label>
              </div>
              index++;
            }
          }
        </div>
      </div>

      <div class="d-block fa-2x mt-3 text-center">
        <strong>@Model.maxPrice</strong><i class="fa fa-rub nohover ms-1 sm" aria-hidden="true"></i>
        <button tabindex="0" data-bs-toggle="tooltip" title="Disabled tooltip" class="btn btn-main bg-gray w-25 ms-3"><i class="fas nohover  fa-cart-plus lg opacity-100 align-middle" aria-hidden="true"></i></button>
      </div>
    </div>
  </div>
</div>

<script>
  try{
       VK.Goal('view_content');
  }
  catch (exp){

  }

</script>

<script type="module">
  //            import * as three from '../../build/three.js';
  //            import { OrbitControls } from '../../lib/three/controls/OrbitControls.js';
  //            import { GUI } from '../../lib/three/lil-gui.module.min.js';
  //            import { GLTFLoader } from '../../lib/three/GLTFLoader.js';

  //            var modelsArray = ["../../3d/hoody/hoody.gltf" ,"../../3d/demo/shirt/scene.gltf", "../../3d/itwiki/scene.gltf"];

  //            function renderModel(wrapper, modelSource) {
  //              if (wrapper == null || modelSource == null) return;
  //              if (wrapper == null) return;

  //              const scene = new THREE.Scene();
  //              const camera = new THREE.PerspectiveCamera(
  //                  40,  // fov
  //                  window.innerWidth / window.innerHeight,   // aspect
  //                  0.05, // near
  //                  500); // far
  //              camera.position.z = 4;
  //              const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
  //              const loader = new GLTFLoader();
  //              renderer.setClearColor(0x000000, 0);
  //              renderer.setSize(window.innerWidth, window.innerHeight);
  //              wrapper.appendChild(renderer.domElement);
  //              const pLight = new THREE.PointLight(0xFFFFFF, 4);
  //              const pLight2 = new THREE.PointLight(0xFFFFFF, 4);
  //              const pLight3 = new THREE.PointLight(0xFFFFFF, 4);
  //              const pLight4 = new THREE.PointLight(0xFFFFFF, 4);
  //              pLight.position.z = 1;
  //              pLight.position.y = 1;
  //              pLight.position.x = 0;
  //              pLight2.position.z = -1;
  //              pLight2.position.y = 1;
  //              pLight2.position.x = 0;

  //              pLight3.position.z = 0;
  //              pLight3.position.y = 1;
  //              pLight3.position.x = 2;

  //              pLight4.position.z = 0;
  //              pLight4.position.y = 1;
  //              pLight4.position.x = -2;

  //              scene.add(pLight3);
  //              scene.add(pLight4);
  //              scene.add(pLight2);
  //              scene.add(pLight);

  //              let obj = null;
  //              const controls = new OrbitControls(camera, renderer.domElement);
  //              controls.minDistance = 1;
  //              controls.maxDistance = 8;


  //              function onWindowResize() {
  //                  camera.aspect = window.innerWidth / window.innerHeight;
  //                  camera.updateProjectionMatrix();
  //                  renderer.setSize(window.innerWidth, window.innerHeight);
  //                  animate();
  //              }

  //              window.addEventListener('resize', onWindowResize, false);

  //              //let material = new THREE.MeshStandardMaterial();

  //              //var texture = new THREE.TextureLoader().load("../../3d/TTST-/textures/shirt.png");
  //              //texture.wrapS = THREE.RepeatWrapping;
  //              //texture.wrapT = THREE.RepeatWrapping;

  //              //console.log(texture);

  //              loader.load(modelSource, function (gltf) {
  //                  obj = gltf;
  //                  obj.scene.scale.set(2, 2, 2);
  //                  obj.scene.position.z = 0;
  //                  obj.scene.position.y = 0;
  //                  obj.scene.position.x = 0;
  //                  scene.add(obj.scene);
  //                  controls.enableDamping = true;
  //                  controls.dampingFactor = 0.25;
  //                  controls.enableZoom = true;

  //                  let model = gltf.scene.children[0].material;
  //                  let color = model.color;
  //                  console.log(obj.scene.children[0].material.map);
  //                  //obj.scene.children[0].material.map = texture;

  //                  //let wrapper = $('#model_fancybox > .model-wrapper');

  //                  //wrapper.prepend('<div id="color_picker"><input type="color" /></div>');

  //                  //let colors = $('#model_fancybox').find('input[type=color]');
  //                  //colors.on('change', (evt)=> {
  //                  //    let newColor = hexToRgb(evt.target.value);
  //                  //    color.r = newColor.r;
  //                  //    color.g = newColor.g;
  //                  //    color.b = newColor.b;
  //                  //    animate();
  //                  //});
  //                  controls.update(wrapper);
  //              });

  //              function animate() {
  //                  controls.update();
  //                  requestAnimationFrame(animate);
  //                  renderer.render(scene, camera);
  //              };
  //              animate();
  //           }
  //  (function () {
  //      $('.model-wrapper').each((i, e) => { renderModel(e, '@Model.modelPath');});
  //  })();

</script>
