@using Microsoft.AspNetCore.Html

@model Product

<div class="row pt-5">
  <div class="col-md-12">
    <h1 class="text-center">@ViewData["categoryName"]</h1>
  </div>
</div>

<div class="row">
  <div class="col-sm-4 mr-auto">
    <a href="@Url.ActionLink("Category", "Home", new {id=ViewData["backUrl"]})">
      <i class="fas fa-arrow-left md ms-5" style="opacity:1"></i>
      <span class="" style="display: inline-block;">назад</span>
    </a>
  </div>
</div>

@if (!String.IsNullOrEmpty(Model?.modelPath))
{
  <div id="model_fancybox" style="display:none">
    <div class="model-wrapper"></div>
  </div>
}

<div class="container mt-3" data-id="@Model?.id" id="product_info">
  <div class="row">
    <div class="col-md-6">
      <div id="product_carousel" pause class="carousel slide carousel-fade" data-bs-interval="0" data-bs-ride="carousel">
        @if (!String.IsNullOrEmpty(Model?.modelPath))
        {
          <a data-fancybox href="#model_fancybox" class="position-absolute">
            <img src="~/img/3dicon.png" />
          </a>
        }
        <div class="carousel-indicators">
          @{
            List<string> images = new List<string>();
            Model?.offers.ToList().ForEach(o => images.AddRange(o.images));

            int index = 0;

            if (images.Count == 0) images.Add(Model?.imageUrl!);

            foreach (string imageUrl in images)
            {
              string active = index == 0 ? "active" : "";
              <button type="button" data-bs-target="#product_carousel" class="@active" data-bs-slide-to="@index" aria-label="@index"></button>
              index++;
            }
          }
        </div>
        <div class="carousel-inner">
          @{
            index = 0;
            foreach (string imageUrl in images)
            {
              string active = index == 0 ? "active" : "";
              <div class="carousel-item @active">
                <a class="fancybox" href="@imageUrl" rel="gallery">
                  <div class="d-flex justify-content-center align-items-center" style="max-height:500px;">
                    <img width="500" src="@await ImageResizer.Resize(imageUrl, ImageResizer.ImageType.png, null, 0, 500)" class="d-block w-100" alt="@Model?.name">
                  </div>
                </a>
              </div>
              index++;
            }
          }
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#product_carousel" data-bs-slide="prev">
          <span class="carousel-control-prev-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Предыдущий</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#product_carousel" data-bs-slide="next">
          <span class="carousel-control-next-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Следующий</span>
        </button>
      </div>
    </div>
    <div class="col-md-6">
      <h4 class="text-start p-0 m-0">@Model?.name</h4>
      <small class="opacity-50 fa-1x text-start d-block">Арктикул: @Model?.article</small>
      <label class="mt-4 mb-1">
        Размер:
      </label>
      <div class="btn-group w-100 justify-content-md-start justify-content-center flex-wrap" role="group">
        @{
          index = 0;
          foreach (Offer offer in Model?.offers!)
          {
            if (!offer.active) continue;
            string isChecked = index == 0 ? "checked" : "";
            //string cssClass = string.IsNullOrEmpty(isChecked) && offer.quantity != 0 ? "" : "active";
            string isDisabled = offer.quantity == 0 ? "disabled" : "";
            HtmlString toolTip = offer.quantity == 0 ? new HtmlString("data-bs-toggle='tooltip' data-bs-placement='top' data-original-title='Временно нет в наличии'") : new HtmlString("");
            <div class="btn-anim m-1 @isDisabled">
              <input type="radio" class="btn-check btn-main" name="btnradio" id="@offer.id" autocomplete="off">
              <label @toolTip class="btn btn-primary" style="width:100px" for="@offer.id">@offer.article.Split("-")[1]</label>
            </div>
            index++;
          }
        }
      </div>
      <div class="d-block fa-2x mt-3">
        <strong>@Model.maxPrice</strong><i class="fa fa-rub nohover ms-1 sm" aria-hidden="true"></i>
        <button class="btn btn-main bg-gray w-25 ms-3"><i class="fas fa-cart-plus lg opacity-100 align-middle" aria-hidden="true"></i></button>
      </div>
    </div>
  </div>
</div>


<script type="module">
            import * as three from '../../build/three.js';
            import { OrbitControls } from '../../lib/three/controls/OrbitControls.js';
            import { GUI } from '../../lib/three/lil-gui.module.min.js';
            import { GLTFLoader } from '../../lib/three/GLTFLoader.js';

            var modelsArray = ["../../3d/hoody/hoody.gltf" ,"../../3d/demo/shirt/scene.gltf", "../../3d/itwiki/scene.gltf"];

            function renderModel(wrapper, modelSource) {
              if (wrapper == null || modelSource == null) return;
              if (wrapper == null) return;

              const scene = new THREE.Scene();
              const camera = new THREE.PerspectiveCamera(
                  40,  // fov
                  window.innerWidth / window.innerHeight,   // aspect
                  0.05, // near
                  500); // far
              camera.position.z = 4;
              const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
              const loader = new GLTFLoader();
              renderer.setClearColor(0x000000, 0);
              renderer.setSize(window.innerWidth, window.innerHeight);
              wrapper.appendChild(renderer.domElement);
              const pLight = new THREE.PointLight(0xFFFFFF, 4);
              const pLight2 = new THREE.PointLight(0xFFFFFF, 4);
              const pLight3 = new THREE.PointLight(0xFFFFFF, 4);
              const pLight4 = new THREE.PointLight(0xFFFFFF, 4);
              pLight.position.z = 1;
              pLight.position.y = 1;
              pLight.position.x = 0;
              pLight2.position.z = -1;
              pLight2.position.y = 1;
              pLight2.position.x = 0;

              pLight3.position.z = 0;
              pLight3.position.y = 1;
              pLight3.position.x = 2;

              pLight4.position.z = 0;
              pLight4.position.y = 1;
              pLight4.position.x = -2;

              scene.add(pLight3);
              scene.add(pLight4);
              scene.add(pLight2);
              scene.add(pLight);

              let obj = null;
              const controls = new OrbitControls(camera, renderer.domElement);
              controls.minDistance = 1;
              controls.maxDistance = 8;

              window.addEventListener('resize', onWindowResize, false);
              function onWindowResize() {
                  camera.aspect = window.innerWidth / window.innerHeight;
                  camera.updateProjectionMatrix();
                  renderer.setSize(window.innerWidth, window.innerHeight);
                  animate();
              }

              //let material = new THREE.MeshStandardMaterial();

              //var texture = new THREE.TextureLoader().load("../../3d/TTST-/textures/shirt.png");
              //texture.wrapS = THREE.RepeatWrapping;
              //texture.wrapT = THREE.RepeatWrapping;

              //console.log(texture);

              loader.load(modelSource, function (gltf) {
                  obj = gltf;
                  obj.scene.scale.set(2, 2, 2);
                  obj.scene.position.z = 0;
                  obj.scene.position.y = 0;
                  obj.scene.position.x = 0;
                  scene.add(obj.scene);
                  controls.enableDamping = true;
                  controls.dampingFactor = 0.25;
                  controls.enableZoom = true;

                  let model = gltf.scene.children[0].material;
                  let color = model.color;
                  console.log(obj.scene.children[0].material.map);
                  //obj.scene.children[0].material.map = texture;

                  let wrapper = $('#model_fancybox > .model-wrapper');

                  wrapper.prepend('<div id="color_picker"><input type="color" /></div>');

                  let colors = $('#model_fancybox').find('input[type=color]');
                  colors.on('change', (evt)=> {
                      let newColor = hexToRgb(evt.target.value);
                      color.r = newColor.r;
                      color.g = newColor.g;
                      color.b = newColor.b;
                      animate();
                  });
                  controls.update(wrapper);
              });

              function animate() {
                  controls.update();
                  requestAnimationFrame(animate);
                  renderer.render(scene, camera);
              };
              animate();
           }
  (function () {
      $('.model-wrapper').each((i, e) => { renderModel(e, '@Model.modelPath');});
  })();

</script>
